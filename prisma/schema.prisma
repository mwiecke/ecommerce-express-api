generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  username    String   @unique
  firstName   String   @map("first_name")
  lastName    String   @map("last_name")
  email       String   @unique
  password    String?
  googleId    String?  @unique @map("google_id")
  role        Role     @default(USER)
  isVerified  Boolean  @default(false)
  verifyToken String?
  createdAt   DateTime @default(now()) @map("created_at")
  orders      Order[]
  reviews     Review[]

  @@index([email])
  @@map("users")
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String
  price       Decimal     @db.Decimal(10, 2)
  stock       Int         @default(0)
  imageUrl    String      @map("image_url") @db.VarChar(2048)
  createdAt   DateTime    @default(now()) @map("created_at")
  isDeleted   Boolean     @default(false)
  orderItems  OrderItem[]
  reviews     Review[]

  @@index([name])
  @@map("products")
}

model Review {
  id        String   @id @default(uuid())
  rating    Float
  comment   String
  createdAt DateTime @default(now()) @map("created_at")
  userId    String   @map("user_id")
  productId String   @map("product_id")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
  @@map("reviews")
}

model Order {
  id         String      @id @default(uuid())
  totalPrice Decimal     @map("total_price") @db.Decimal(10, 2)
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now()) @map("created_at")
  userId     String      @map("user_id")
  orderItems OrderItem[]
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment    Payment?

  @@index([userId])
  @@index([createdAt])
  @@map("orders")
}

model OrderItem {
  id        String  @id @default(uuid())
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  productId String  @map("product_id")
  orderId   String  @map("order_id")
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([orderId])
  @@map("order_items")
}

model Payment {
  id            String        @id @default(uuid())
  paymentMethod PaymentMethod @default(STRIPE) @map("payment_method")
  transactionId String?       @map("transaction_id")
  status        PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now()) @map("created_at")
  orderId       String        @unique @map("order_id")
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  STRIPE
  PAYPAL
  COD
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
