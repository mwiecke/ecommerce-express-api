generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  username     String        @unique
  firstName    String        @map("first_name")
  lastName     String        @map("last_name")
  email        String        @unique
  secondEmail  String?       @map("second-email")
  password     String?
  googleId     String?       @unique @map("google_id")
  role         Role          @default(USER)
  isVerified   Boolean       @default(false)
  verifyToken  String?
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt
  orders       Order[]
  reviews      Review[]
  cart         Cart?         @relation("UserCart")
  refreshToken RefreshToken? @relation("UserToken")

  @@index([email])
  @@map("users")
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String
  price       Decimal     @db.Decimal(10, 2)
  stock       Int         @default(0)
  imageUrl    String      @map("image_url") @db.VarChar(2048)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt
  isDeleted   Boolean     @default(false)
  rating      Decimal     @default(0.00) @db.Decimal(10, 2)
  category    String      @default("uncategorized")
  tags        String[]    @default([])
  orderItems  OrderItem[]
  reviews     Review[]
  CartItem    CartItem[]

  @@index([name])
  @@map("products")
}

model Review {
  id        String   @id @default(uuid())
  rating    Float
  comment   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt
  userId    String   @map("user_id")
  productId String   @map("product_id")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
  @@map("reviews")
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation("UserCart", fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id        String   @id @default(uuid())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())

  @@unique([cartId, productId])
  @@index([cartId])
  @@index([productId])
}

model Order {
  id              String      @id @default(uuid())
  user            User        @relation(fields: [userId], references: [id])
  userId          String
  totalPrice      Decimal     @db.Decimal(10, 2)
  status          OrderStatus @default(PENDING)
  paymentMethod   String?
  shippingAddress Json?
  items           OrderItem[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  payment         Payment? // One-to-one

  @@index([userId])
}

model OrderItem {
  id           String   @id @default(uuid())
  order        Order    @relation(fields: [orderId], references: [id])
  orderId      String
  product      Product  @relation(fields: [productId], references: [id])
  productId    String
  productName  String
  productPrice Decimal  @db.Decimal(10, 2)
  productImage String?
  quantity     Int
  price        Decimal  @db.Decimal(10, 2)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}

model Payment {
  id            String        @id @default(uuid())
  paymentMethod PaymentMethod @default(STRIPE) @map("payment_method")
  transactionId String?       @map("transaction_id")
  status        PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now()) @map("created_at")
  orderId       String        @unique @map("order_id")
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation("UserToken", fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("refresh_tokens")
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
}

enum Role {
  USER
  ADMIN
}

enum PaymentMethod {
  STRIPE
  PAYPAL
  COD
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
