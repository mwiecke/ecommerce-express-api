import { z } from 'zod';

export enum Role {
  USER = 'USER',
  ADMIN = 'ADMIN',
}

const passwordSchema = z
  .string()
  .min(8, 'Password must be at least 8 characters')
  .max(32, 'Password must not exceed 32 characters')
  .regex(/[A-Z]/, 'Password must contain at least one uppercase letter')
  .regex(/[a-z]/, 'Password must contain at least one lowercase letter')
  .regex(/[0-9]/, 'Password must contain at least one number')
  .regex(
    /[@$!%*?&]/,
    'Password must contain at least one special character (@$!%*?&)'
  );

const userSchema = z
  .object({
    id: z.string().uuid(), // Generated by Prisma
    username: z
      .string()
      .trim()
      .min(3, 'Username must be at least 3 characters'),
    firstName: z.string().trim(),
    lastName: z.string().trim(),
    email: z.string().email(),
    secondEmail: z.string().email().optional(),
    password: passwordSchema.optional().nullable(),
    googleId: z.string().optional().nullable(),
    role: z.enum(Object.values(Role) as [Role, ...Role[]]).default(Role.USER),
    isVerified: z.boolean().default(false), // Added isVerified field
    verifyToken: z.string().optional().nullable(), // Verification token if needed
    createdAt: z.date().optional(), // Generated by Prisma
    orders: z.any().optional(), // Not needed for creation
    reviews: z.any().optional(), // Not needed for creation
  })
  .refine(
    (data) => data.password !== undefined || data.googleId !== undefined,
    {
      message: 'Either password or Google ID must be provided',
      path: ['password'],
    }
  );

const inputuser = z.object({
  username: z.string().trim().min(3, 'Username must be at least 3 characters'),
  firstName: z.string().trim(),
  lastName: z.string().trim(),
  email: z.string().email(),
  password: passwordSchema.optional().nullable(),
  googleId: z.string().optional().nullable(),
});

const productSchema = z.object({
  name: z.string().min(1),
  description: z.string().min(1),
  price: z.union([z.number(), z.string().transform((val) => Number(val))]),
  stock: z.union([z.number(), z.string().transform((val) => Number(val))]),
  category: z.string(),
  tags: z.union([
    z.array(z.string()),
    z.string().transform((val) => JSON.parse(val)),
  ]),
  imageUrl: z.string(),
});

const loginSchema = z.object({
  email: z.string().email(),
  password: z.string().min(8),
});

const reviewsSchema = z.object({
  userId: z.string().uuid().optional(),
  productId: z.string().uuid().optional(),
  rating: z.number().positive().max(5).default(0),
  comment: z.string().default(''),
});

const cartSchema = z.object({
  productId: z.string().uuid(),
  price: z.number().positive('Price must be positive').default(0.0),
  quantity: z.number().positive('quantity must be positive').default(1),
});

const RefreshTokenSchema = z.object({
  token: z.string(),
  userId: z.string(),
  expiresAt: z.date(),
});

const productFilterSchema = z.object({
  name: z.string().optional(),
  minPrice: z.coerce.number().optional(),
  maxPrice: z.coerce.number().optional(),
  inStock: z.boolean().optional(),
  category: z.string().optional(),
  tags: z.array(z.string()).optional(),
});

const productSortingSchema = z.object({
  field: z.enum(['name', 'price', 'createdAt', 'rating', 'category']),
  order: z.enum(['asc', 'desc']),
});

export type User = z.infer<typeof userSchema>;
export type Product = z.infer<typeof productSchema>;
export type Login = z.infer<typeof loginSchema>;
export type reviews = z.infer<typeof reviewsSchema>;
export type Cart = z.infer<typeof cartSchema>;
export type RefreshToken = z.infer<typeof RefreshTokenSchema>;

export {
  passwordSchema,
  userSchema,
  productSchema,
  loginSchema,
  reviewsSchema,
  cartSchema,
  RefreshTokenSchema,
  productFilterSchema,
  productSortingSchema,
  inputuser,
};
